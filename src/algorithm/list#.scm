;;; Copyright (c) 2012-2014, Alvaro Castro-Castilla. All rights reserved.
;;; Non-standard list procedures

(##namespace ("fabric:algorithm/list#"
              xcons
              list-tabulate
              cons*
              list-copy
              circular-list
              proper-list?
              dotted-list?
              circular-list?
              not-pair?
              null-list?
              list=
              length+
              zip
              first
              second
              third
              fourth
              fifth
              sixth
              seventh
              eighth
              ninth
              tenth
              car+cdr
              take
              drop
              take!
              take-right
              drop-right
              drop-right!
              split-at
              split-at!
              last
              last-pair
              unzip1
              unzip2
              unzip3
              unzip4
              unzip5
              append!
              append-reverse
              append-reverse!
              concatenate
              concatenate!
              count
              unfold
              fold
              fold-right
              pair-fold-right
              pair-fold
              reduce
              reduce-right
              append-map
              append-map!
              pair-for-each
              map!
              filter-map
              map-in-order
              filter
              filter!
              partition
              partition!
              remove
              remove!
              alist-cons
              alist-copy
              find
              find-tail
              take-while
              drop-while
              take-while!
              span
              span!
              break
              break!
              any
              every
              list-index
              reverse!
              lset<=
              lset=
              lset-adjoin
              lset-union
              lset-union!
              lset-intersection
              lset-intersection!
              lset-difference
              lset-difference!
              lset-xor
              lset-xor!
              lset-diff+intersection
              lset-diff+intersection!
              make-list
              iota
              unfold-right
              delete
              delete!
              member+
              delete-duplicates
              delete-duplicates!
              assoc+
              alist-delete
              alist-delete!))
